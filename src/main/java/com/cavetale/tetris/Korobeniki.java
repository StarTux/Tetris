package com.cavetale.tetris;

import com.cavetale.mytems.item.music.Melody;
import org.bukkit.entity.Player;
import static com.cavetale.mytems.item.music.Semitone.*;
import static org.bukkit.Instrument.*;
import static org.bukkit.Note.Tone.*;

public final class Korobeniki {
    private static final Melody MELODY = Melody.builder(BIT, 100L)
        .beat(4, E, 0)
        .beat(2, B, 0)
        .beat(2, C, 0)
        .beat(4, D, 0)
        .beat(2, C, 0)
        .beat(2, B, 0)
        .beat(4, A, 0)
        .beat(2, A, 0)
        .beat(2, C, 0)
        .beat(4, E, 0)
        .beat(2, D, 0)
        .beat(2, C, 0)
        .beat(6, B, 0)
        .beat(2, C, 0)
        .beat(4, D, 0)
        .beat(4, E, 0)
        .beat(4, C, 0)
        .beat(4, A, 0)
        .beat(4, A, 0)
        .pause(4)
        .pause(2)
        .beat(4, D, 0)
        .beat(2, F, 0)
        .beat(4, A, 1)
        .beat(2, G, 1)
        .beat(2, F, 0)
        .beat(6, E, 0)
        .beat(2, C, 0)
        .beat(4, E, 0)
        .beat(2, D, 0)
        .beat(2, C, 0)
        .beat(6, B, 0)
        .beat(2, C, 0)
        .beat(4, D, 0)
        .beat(4, E, 0)
        .beat(4, C, 0)
        .beat(4, A, 0)
        .beat(4, A, 0)
        .pause(4)
        .beat(8, E, 0)
        .beat(8, C, 0)
        .beat(8, D, 0)
        .beat(8, B, 0)
        .beat(8, A, 0)
        .beat(8, A, 0)
        .beat(16, G, SHARP, 0)
        .beat(8, E, 0)
        .beat(8, C, 0)
        .beat(8, D, 0)
        .beat(8, B, 0)
        .beat(4, C, 0)
        .beat(4, E, 0)
        .beat(4, A, 1)
        .beat(4, A, 1)
        .beat(16, G, SHARP, 1)
        .extra(b -> b
               .instrument(BASS_GUITAR)
               .beat(2, E, 0)
               .beat(2, E, 1)
               .beat(2, E, 0)
               .beat(2, E, 1)
               .beat(2, E, 0)
               .beat(2, E, 1)
               .beat(2, E, 0)
               .beat(2, E, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, D, 0)
               .beat(2, D, 1)
               .beat(2, D, 0)
               .beat(2, D, 1)
               .beat(2, D, 0)
               .beat(2, D, 1)
               .beat(2, D, 0)
               .beat(2, D, 1)
               .beat(2, C, 0)
               .beat(2, C, 1)
               .beat(2, C, 0)
               .beat(2, C, 1)
               .beat(2, C, 0)
               .beat(2, C, 1)
               .beat(2, C, 0)
               .beat(2, C, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1) //
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, G, SHARP, 0)
               .beat(2, G, SHARP, 1)
               .beat(2, G, 0)
               .beat(2, G, 1)
               .beat(2, G, 0)
               .beat(2, G, 1)
               .beat(2, G, 0)
               .beat(2, G, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1) //
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, A, 0)
               .beat(2, A, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, C, 0)
               .beat(2, C, 1)
               .beat(2, C, 0)
               .beat(2, C, 1)
               .beat(2, C, 0)
               .beat(2, C, 1)
               .beat(2, C, 0)
               .beat(2, C, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1)
               .beat(2, B, 0)
               .beat(2, B, 1))
        .build();

    public static void play(Player player) {
        MELODY.play(TetrisPlugin.instance, player);
    }

    private Korobeniki() { }
}
